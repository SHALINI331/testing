// testng session1 grow 

package runner;

import java.net.URL;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.events.EventFiringDecorator;
import org.openqa.selenium.support.events.WebDriverListener;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import utils.EventHandler;   // ✅ keep your default listener in utils

public class TestSample {

    static WebDriver driver;

    @BeforeClass
    public void setup() {
        try {
            driver = new RemoteWebDriver(new URL("http://localhost:4444"), new ChromeOptions());

            driver.manage().window().maximize();
            driver.manage().timeouts().implicitlyWait(java.time.Duration.ofSeconds(10));
            driver.manage().timeouts().pageLoadTimeout(java.time.Duration.ofSeconds(10));

            // ✅ Use your default listener from utils
            WebDriverListener listener = new EventHandler();
            driver = new EventFiringDecorator<>(listener).decorate(driver);

            driver.get("https://groww.in/");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test(dependsOnGroups = {"login"})
    public void test1() throws InterruptedException {
        driver.findElement(By.xpath("//button/span[contains(text(),'Continue')]")).click();
        Thread.sleep(5000);
    }

    @Test(groups = {"login"})
    public void test2() throws InterruptedException {
        driver.findElement(By.xpath("//button/span[contains(text(),'Login/Sign up')]")).click();

        String poptext = driver.findElement(By.xpath("//div[@id='lils382InitialLoginScreen']")).getText();

        // ✅ No separate class – use TestNG Assert directly
        Assert.assertTrue(poptext.contains("Welcome to Groww"),
                "Text verification failed! Expected: Welcome to Groww, but got: " + poptext);

        Thread.sleep(2000);
    }

    @AfterClass(alwaysRun = true)
    public void teardown() {
        if (driver != null) {
            System.out.println("Closing browser session...");
            driver.quit();
        }
    }
}
